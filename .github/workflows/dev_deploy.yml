#name: Duckstar Dev CI/CD
#
#on:
#  push:
#    branches: [ dev ]  # dev 브랜치에 push가 일어날 때 실행
#
#jobs:
#  build:
#    runs-on: ubuntu-latest # OS 환경
#
#    steps:
#      - uses: actions/checkout@v3  # 저장소 코드 체크아웃
#
#      - name: Set up JDK 17  # Java 개발 킷 설정
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#
#      - name: Set environment variables
#        run: |
#          echo "BASE_URL=https://duckstar.kr" >> $GITHUB_ENV
#
#      - name: Make application.yml  # application.yml 파일 생성 및 환경 변수 적용
#        run: |
#          cd ./src/main/resources
#          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
#          cat ./application.yml | envsubst > ./application.yml.tmp && mv ./application.yml.tmp ./application.yml
#        shell: bash
#
#      - name: Grant execute permission for gradlew  # gradlew 실행 권한 부여
#        run: chmod +x gradlew
#
#      - name: Clean and Build with Gradle  # Gradle clean build 실행
#        uses: gradle/gradle-build-action@v3
#        with:
#          arguments: clean build --stacktrace --info --scan  # 🔹 자세한 로그 출력
#          cache-read-only: false  # Gradle 빌드 캐시 활성화 (빌드 속도 최적화)
#
#
#      - name: Upload Test Report  # 🔹 테스트 리포트 업로드
#        if: failure()  # 테스트 실패 시에만 실행
#        uses: actions/upload-artifact@v4
#        with:
#          name: test-report
#          path: build/reports/tests/test/
#
#
#      - name: Upload build artifact  # 빌드된 아티팩트 업로드
#        uses: actions/upload-artifact@v4
#        with:
#          name: duckstar-server
#          path: build/libs/*.jar
#
#  deploy:
#    needs: build
#    if: success()  # 🔹 빌드 성공 시에만 실행되도록 추가
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Download build artifact  # 이전 단계에서 업로드한 아티팩트 다운로드
#        uses: actions/download-artifact@v4
#        with:
#          name: duckstar-server
#          path: build/libs/
#
#      - name: Deploy to EC2  # EC2에 배포
#        env:
#          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
#          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
#          EC2_HOST: ${{ secrets.EC2_HOST }}
#        run: |
#          echo "$EC2_SSH_KEY" > private_key.pem
#          chmod 600 private_key.pem
#
#          jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)
#
#          scp -i private_key.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/duckstar-server.jar
#
#          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
#            pgrep -f duckstar-server.jar | xargs -r kill -15
#            sleep 10
#            mkdir -p /home/$EC2_USERNAME/logs
#            nohup java -jar /home/$EC2_USERNAME/duckstar-server.jar > /home/$EC2_USERNAME/logs/app.log 2>&1 &
#          "
#
#          rm -f private_key.pem